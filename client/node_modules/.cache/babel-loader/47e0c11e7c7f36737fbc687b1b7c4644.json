{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankit\\\\Downloads\\\\MERN-EXPENSES-TRACKER-main\\\\client\\\\src\\\\components\\\\Graph.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Chart, ArcElement } from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport Label from './Label';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(ArcElement);\nconst Graph = () => {\n  _s();\n  const transactionsFromStore = useSelector(state => state.expensesReducer.transactions);\n\n  // Calculate the total amount from the remaining transactions\n  const totalAmount = transactionsFromStore.reduce((total, transaction) => {\n    if (transaction.type === 'Expense' || transaction.type === 'Investment') {\n      return total - Number(transaction.amount);\n    } else {\n      return total + Number(transaction.amount);\n    }\n  }, 0);\n\n  // Extract the amounts from transactions and labels from types\n  const transactionAmounts = transactionsFromStore.map(transaction => transaction.amount);\n  const transactionTypes = transactionsFromStore.map(transaction => transaction.type);\n\n  // Define a function to calculate the total amount for each type\n  const typeAmounts = {};\n  transactionAmounts.forEach((amount, index) => {\n    const type = transactionTypes[index];\n    if (!typeAmounts[type]) {\n      typeAmounts[type] = 0;\n    }\n    if (type === 'Expense' || type === 'Investment') {\n      typeAmounts[type] -= Number(amount);\n    } else {\n      typeAmounts[type] += Number(amount);\n    }\n  });\n\n  // Extract unique types and their corresponding amounts\n  const uniqueTypes = Object.keys(typeAmounts);\n  const typeAmountValues = uniqueTypes.map(type => typeAmounts[type]);\n\n  // Define colors for the chart\n  const colors = ['rgb(255, 99, 132)', 'rgb(54, 162, 235)', 'rgb(255, 205, 86)'\n  // Add more colors as needed for additional types\n  ];\n\n  // Create the chart data\n  const chartData = {\n    labels: uniqueTypes,\n    datasets: [{\n      data: typeAmountValues,\n      backgroundColor: colors,\n      hoverOffset: 4\n    }]\n  };\n  const config = {\n    options: {\n      cutout: 100\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center max-w-xs mx-auto\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart relative\",\n        children: [/*#__PURE__*/_jsxDEV(Doughnut, {\n          ...config,\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"mb-4 font-bold title\",\n          children: [\"Total\", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"block text-3xl text-emerald-400\",\n            children: [totalAmount < 0 ? '-' : '', \"\\u20B9\", Math.abs(totalAmount)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col py-10 gap-4\",\n        children: /*#__PURE__*/_jsxDEV(Label, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"BXh0uIjX/X1/rAa/dhJiQ94FqFA=\", false, function () {\n  return [useSelector];\n});\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","Chart","ArcElement","Doughnut","Label","useSelector","register","Graph","transactionsFromStore","state","expensesReducer","transactions","totalAmount","reduce","total","transaction","type","Number","amount","transactionAmounts","map","transactionTypes","typeAmounts","forEach","index","uniqueTypes","Object","keys","typeAmountValues","colors","chartData","labels","datasets","data","backgroundColor","hoverOffset","config","options","cutout","Math","abs"],"sources":["C:/Users/ankit/Downloads/MERN-EXPENSES-TRACKER-main/client/src/components/Graph.js"],"sourcesContent":["import React from 'react';\nimport { Chart, ArcElement } from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport Label from './Label';\nimport { useSelector } from 'react-redux';\n\nChart.register(ArcElement);\n\nconst Graph = () => {\n  const transactionsFromStore = useSelector((state) => state.expensesReducer.transactions);\n\n  // Calculate the total amount from the remaining transactions\n  const totalAmount = transactionsFromStore.reduce((total, transaction) => {\n    if (transaction.type === 'Expense' || transaction.type === 'Investment') {\n      return total - Number(transaction.amount);\n    } else {\n      return total + Number(transaction.amount);\n    }\n  }, 0);\n\n  // Extract the amounts from transactions and labels from types\n  const transactionAmounts = transactionsFromStore.map((transaction) => transaction.amount);\n  const transactionTypes = transactionsFromStore.map((transaction) => transaction.type);\n\n  // Define a function to calculate the total amount for each type\n  const typeAmounts = {};\n  transactionAmounts.forEach((amount, index) => {\n    const type = transactionTypes[index];\n    if (!typeAmounts[type]) {\n      typeAmounts[type] = 0;\n    }\n    if (type === 'Expense' || type === 'Investment') {\n      typeAmounts[type] -= Number(amount);\n    } else {\n      typeAmounts[type] += Number(amount);\n    }\n  });\n\n  // Extract unique types and their corresponding amounts\n  const uniqueTypes = Object.keys(typeAmounts);\n  const typeAmountValues = uniqueTypes.map((type) => typeAmounts[type]);\n\n  // Define colors for the chart\n  const colors = [\n    'rgb(255, 99, 132)',\n    'rgb(54, 162, 235)',\n    'rgb(255, 205, 86)',\n    // Add more colors as needed for additional types\n  ];\n\n  // Create the chart data\n  const chartData = {\n    labels: uniqueTypes,\n    datasets: [\n      {\n        data: typeAmountValues,\n        backgroundColor: colors,\n        hoverOffset: 4,\n      },\n    ],\n  };\n\n  const config = {\n    options: {\n      cutout: 100,\n    },\n  };\n\n  return (\n    <div className=\"flex justify-center max-w-xs mx-auto\">\n      <div className=\"item\">\n        <div className=\"chart relative\">\n          <Doughnut {...config} data={chartData} />\n          <h3 className=\"mb-4 font-bold title\">\n            Total\n            <span className=\"block text-3xl text-emerald-400\">\n              {totalAmount < 0 ? '-' : ''}\n              &#x20b9;{Math.abs(totalAmount)}\n            </span>\n          </h3>\n        </div>\n        <div className=\"flex flex-col py-10 gap-4\">\n          <Label />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Graph;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}