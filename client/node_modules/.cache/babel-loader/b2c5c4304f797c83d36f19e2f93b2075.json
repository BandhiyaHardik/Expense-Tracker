{"ast":null,"code":"import _objectSpread from\"D:/Task-1 Expense Tracker/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React from'react';import{Chart,ArcElement}from'chart.js';import{Doughnut}from'react-chartjs-2';import Label from'./Label';import{useSelector}from'react-redux';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";Chart.register(ArcElement);var Graph=function Graph(){var transactionsFromStore=useSelector(function(state){return state.expensesReducer.transactions;});// Calculate the total amount from the remaining transactions\nvar totalAmount=transactionsFromStore.reduce(function(total,transaction){if(transaction.type==='Expense'||transaction.type==='Investment'){return total-Number(transaction.amount);}else{return total+Number(transaction.amount);}},0);// Extract the amounts from transactions and labels from types\nvar transactionAmounts=transactionsFromStore.map(function(transaction){return transaction.amount;});var transactionTypes=transactionsFromStore.map(function(transaction){return transaction.type;});// Define a function to calculate the total amount for each type\nvar typeAmounts={};transactionAmounts.forEach(function(amount,index){var type=transactionTypes[index];if(!typeAmounts[type]){typeAmounts[type]=0;}if(type==='Expense'||type==='Investment'){typeAmounts[type]-=Number(amount);}else{typeAmounts[type]+=Number(amount);}});// Extract unique types and their corresponding amounts\nvar uniqueTypes=Object.keys(typeAmounts);var typeAmountValues=uniqueTypes.map(function(type){return typeAmounts[type];});// Define colors for the chart\nvar colors=['rgb(255, 99, 132)','rgb(54, 162, 235)','rgb(255, 205, 86)'// Add more colors as needed for additional types\n];// Create the chart data\nvar chartData={labels:uniqueTypes,datasets:[{data:typeAmountValues,backgroundColor:colors,hoverOffset:4}]};var config={options:{cutout:100}};return/*#__PURE__*/_jsx(\"div\",{className:\"flex justify-center max-w-xs mx-auto\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"item\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chart relative\",children:[/*#__PURE__*/_jsx(Doughnut,_objectSpread(_objectSpread({},config),{},{data:chartData})),/*#__PURE__*/_jsxs(\"h3\",{className:\"mb-4 font-bold title\",children:[\"Total\",/*#__PURE__*/_jsxs(\"span\",{className:\"block text-3xl text-emerald-400\",children:[totalAmount<0?'-':'',\"\\u20B9\",Math.abs(totalAmount)]})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"flex flex-col py-10 gap-4\",children:/*#__PURE__*/_jsx(Label,{})})]})});};export default Graph;","map":{"version":3,"names":["React","Chart","ArcElement","Doughnut","Label","useSelector","register","Graph","transactionsFromStore","state","expensesReducer","transactions","totalAmount","reduce","total","transaction","type","Number","amount","transactionAmounts","map","transactionTypes","typeAmounts","forEach","index","uniqueTypes","Object","keys","typeAmountValues","colors","chartData","labels","datasets","data","backgroundColor","hoverOffset","config","options","cutout","Math","abs"],"sources":["D:/Task-1 Expense Tracker/client/src/components/Graph.js"],"sourcesContent":["import React from 'react';\nimport { Chart, ArcElement } from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport Label from './Label';\nimport { useSelector } from 'react-redux';\n\nChart.register(ArcElement);\n\nconst Graph = () => {\n  const transactionsFromStore = useSelector((state) => state.expensesReducer.transactions);\n\n  // Calculate the total amount from the remaining transactions\n  const totalAmount = transactionsFromStore.reduce((total, transaction) => {\n    if (transaction.type === 'Expense' || transaction.type === 'Investment') {\n      return total - Number(transaction.amount);\n    } else {\n      return total + Number(transaction.amount);\n    }\n  }, 0);\n\n  // Extract the amounts from transactions and labels from types\n  const transactionAmounts = transactionsFromStore.map((transaction) => transaction.amount);\n  const transactionTypes = transactionsFromStore.map((transaction) => transaction.type);\n\n  // Define a function to calculate the total amount for each type\n  const typeAmounts = {};\n  transactionAmounts.forEach((amount, index) => {\n    const type = transactionTypes[index];\n    if (!typeAmounts[type]) {\n      typeAmounts[type] = 0;\n    }\n    if (type === 'Expense' || type === 'Investment') {\n      typeAmounts[type] -= Number(amount);\n    } else {\n      typeAmounts[type] += Number(amount);\n    }\n  });\n\n  // Extract unique types and their corresponding amounts\n  const uniqueTypes = Object.keys(typeAmounts);\n  const typeAmountValues = uniqueTypes.map((type) => typeAmounts[type]);\n\n  // Define colors for the chart\n  const colors = [\n    'rgb(255, 99, 132)',\n    'rgb(54, 162, 235)',\n    'rgb(255, 205, 86)',\n    // Add more colors as needed for additional types\n  ];\n\n  // Create the chart data\n  const chartData = {\n    labels: uniqueTypes,\n    datasets: [\n      {\n        data: typeAmountValues,\n        backgroundColor: colors,\n        hoverOffset: 4,\n      },\n    ],\n  };\n\n  const config = {\n    options: {\n      cutout: 100,\n    },\n  };\n\n  return (\n    <div className=\"flex justify-center max-w-xs mx-auto\">\n      <div className=\"item\">\n        <div className=\"chart relative\">\n          <Doughnut {...config} data={chartData} />\n          <h3 className=\"mb-4 font-bold title\">\n            Total\n            <span className=\"block text-3xl text-emerald-400\">\n              {totalAmount < 0 ? '-' : ''}\n              &#x20b9;{Math.abs(totalAmount)}\n            </span>\n          </h3>\n        </div>\n        <div className=\"flex flex-col py-10 gap-4\">\n          <Label />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Graph;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}